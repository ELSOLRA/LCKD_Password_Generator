# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: ${env:SERVERLESS_ORG}
# "service" is the name of this project. This will also be added to your AWS resource names.
service: password-manager

provider:
  name: aws
  runtime: nodejs20.x
  stage: ${opt:stage, 'dev'}
  region: eu-north-1
  environment:
    USER_TABLE: ${self:service}-users-${self:provider.stage}
    PASSWORDS_TABLE: ${self:service}-passwords-${self:provider.stage}
    ENCRYPTION_KEY: abc123
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USER_TABLE}
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PASSWORDS_TABLE}

package:
  individually: true

build:
  esbuild:
    bundle: true
    minify: true

functions:
  register:
    handler: handler.hello
    events:
      - httpApi:
          path: /
          method: get

resources:
  Resources:
    UserTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.USER_TABLE}
        AttributeDefinitions:
          - AttributeName: username
            AttributeType: S
        KeySchema:
          - AttributeName: username
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    PasswordsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.PASSWORDS_TABLE}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: website
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: website
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
